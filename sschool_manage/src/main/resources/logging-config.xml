<?xml version="1.0" encoding="utf-8" ?>
<!-- 
	scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
 	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
<!-- 
	根节点<configuration>的子节点：
		<configuration>下面一共有2个属性，3个子节点，分别是：	
 -->
	<!-- 属性一：设置上下文名称<contextName> -->
	<contextName>logback</contextName>
	<!-- 属性二：设置变量<property> -->
	<property name="log.path" value="/usr/local/tomcat8880/log/" />
	<!-- 子节点1 appender -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!-- console日志输出级别 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
		<!-- 
			%d{HH: mm:ss.SSS}——日志输出时间
			%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
			%-5level——日志级别，并且使用5个字符靠左对齐
			%logger{36}——日志输出者的名字
			%msg——日志消息
			%n——平台的换行符
		 -->
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>
	<!-- 
		另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志
		<fileNamePattern>${log.path}/logback.%d{yyyy-MM-dd}.log</fileNamePattern>定义了日志的切分方式——把每一天的日志归档到一个文件中
		<maxHistory>30</maxHistory>表示只保留最近30天的日志，以防止日志填满整个磁盘空间。同理，可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式。
		<totalSizeCap>1GB</totalSizeCap>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。
	 -->
	<appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/logback.%d{yyyy-MM-dd}.log</fileNamePattern>
			<maxHistory>30</maxHistory>
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>
	<!-- 
	子节点二<root>
	root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。
	 -->
	<root level="info">
		<appender-ref ref="console" />
		<appender-ref ref="file" />
	</root>
	<!-- 
	子节点三<logger>
	<logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
	<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
	name:用来指定受此logger约束的某一个包或者具体的某一个类。
	level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
	还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。
	addtivity:是否向上级logger传递打印信息。默认是true。
	 -->
</configuration>















